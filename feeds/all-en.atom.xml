<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Wilson Freitas</title><link href="http://wilsonfreitas.github.io/" rel="alternate"></link><link href="http://wilsonfreitas.github.io/feeds/all-en.atom.xml" rel="self"></link><id>http://wilsonfreitas.github.io/</id><updated>2014-06-15T00:00:00-03:00</updated><entry><title>The quick and dirty term structure interpolator in R</title><link href="http://wilsonfreitas.github.io/posts/the-quick-and-dirty-term-structure-interpolator-in-r.html" rel="alternate"></link><published>2014-06-15T00:00:00-03:00</published><updated>2014-06-15T00:00:00-03:00</updated><author><name>Wilson Freitas</name></author><id>tag:wilsonfreitas.github.io,2014-06-15:/posts/the-quick-and-dirty-term-structure-interpolator-in-r.html</id><summary type="html">&lt;p&gt;Use interest rate term structures for calculations is one of the daily activies that any quant has to accomplish with.
I use the many of the curves released by &lt;a href="http://www.bmfbovespa.com.br/home.aspx?idioma=pt-br" title="BM&amp;amp;F Bovespa"&gt;BM&amp;amp;F Bovespa&lt;/a&gt; in that &lt;a href="http://www2.bmf.com.br/pages/portal/bmfbovespa/boletim1/TxRef1.asp" title="BVMF Curves"&gt;page&lt;/a&gt;.
In order to have the curves always at hand I've written that few lines of â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Use interest rate term structures for calculations is one of the daily activies that any quant has to accomplish with.
I use the many of the curves released by &lt;a href="http://www.bmfbovespa.com.br/home.aspx?idioma=pt-br" title="BM&amp;amp;F Bovespa"&gt;BM&amp;amp;F Bovespa&lt;/a&gt; in that &lt;a href="http://www2.bmf.com.br/pages/portal/bmfbovespa/boletim1/TxRef1.asp" title="BVMF Curves"&gt;page&lt;/a&gt;.
In order to have the curves always at hand I've written that few lines of code to download and return an interpolator where the only argument is the number of days I want to interpolate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;XML&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;bizdays&lt;span class="p"&gt;)&lt;/span&gt;

cal &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; create.calendar&lt;span class="p"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ANBIMA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; holidays&lt;span class="o"&gt;=&lt;/span&gt;holidaysANBIMA&lt;span class="p"&gt;,&lt;/span&gt; weekdays&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;saturday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sunday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
bizdays.options&lt;span class="o"&gt;$&lt;/span&gt;set&lt;span class="p"&gt;(&lt;/span&gt;default.calendar&lt;span class="o"&gt;=&lt;/span&gt;cal&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="m"&gt;.&lt;/span&gt;get_curve_url &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;refdate&lt;span class="p"&gt;,&lt;/span&gt; ticker&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    url &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://www2.bmf.com.br/pages/portal/bmfbovespa/boletim1/TxRef1.asp&amp;#39;&lt;/span&gt;
    query &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; str_supplant&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;?Data={refdate}&amp;amp;Data1={sysdate}&amp;amp;slcTaxa={ticker}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;refdate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;refdate&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%d/%m/%Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            sysdate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;Sys.Date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%Y%m%d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            ticker&lt;span class="o"&gt;=&lt;/span&gt;ticker&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kp"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; query&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

get_curve &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;refdate&lt;span class="p"&gt;,&lt;/span&gt; ticker&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PRE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    refdate &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;refdate&lt;span class="p"&gt;)&lt;/span&gt;
    url &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;.&lt;/span&gt;get_curve_url&lt;span class="p"&gt;(&lt;/span&gt;refdate&lt;span class="p"&gt;,&lt;/span&gt; ticker&lt;span class="p"&gt;)&lt;/span&gt;
    doc &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; htmlTreeParse&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; useInternalNodes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    num &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; xpathSApply&lt;span class="p"&gt;(&lt;/span&gt;doc&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;//td[contains(@class, &amp;#39;tabelaConteudo&amp;#39;)]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kp"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[\r\n \t]+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; xmlValue&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)))&lt;/span&gt;
    num &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;num&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kp"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; x&lt;span class="p"&gt;)),&lt;/span&gt; USE.NAMES&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    colspan &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;as.integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;xpathApply&lt;span class="p"&gt;(&lt;/span&gt;doc&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;//td[contains(@class, &amp;#39;tabelaTitulo&amp;#39;)]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  xmlAttrs &lt;span class="p"&gt;)[[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;colspan &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        terms &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; num&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        rates &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; num&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;
        log_pu &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; rates&lt;span class="o"&gt;*&lt;/span&gt;terms&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;360&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        rate &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;pu&lt;span class="p"&gt;,&lt;/span&gt; term&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;pu &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;term&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        terms &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; bizdayse&lt;span class="p"&gt;(&lt;/span&gt;refdate&lt;span class="p"&gt;,&lt;/span&gt; num&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
        rates &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; num&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;
        log_pu &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; rates&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;252&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        rate &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;pu&lt;span class="p"&gt;,&lt;/span&gt; term&lt;span class="p"&gt;)&lt;/span&gt; pu&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;252&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;term&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    log_price_interpolator &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; approxfun&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="p"&gt;,&lt;/span&gt; log_pu&lt;span class="p"&gt;,&lt;/span&gt; method&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;linear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;term&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        pu &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;log_price_interpolator&lt;span class="p"&gt;(&lt;/span&gt;term&lt;span class="p"&gt;))&lt;/span&gt;
        rate&lt;span class="p"&gt;(&lt;/span&gt;pu&lt;span class="p"&gt;,&lt;/span&gt; term&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, once you have loaded that code you can get the Brazilian interbank curve by calling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;irbrl &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; get_curve&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2013-06-13&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PRE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
irbrl&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;252&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##  [1] 7.880000 8.010000 8.158363 8.369100 8.537173 8.655198 8.740000
##  [8] 8.826095 8.895053 8.965071 9.050000 9.121180
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The curve for US dollar deposits in Brazil&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;irusd &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; get_curve&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2013-06-13&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;DOL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
irusd&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;360&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##  [1] 0.3135554 0.6300000 0.8300000 1.0400000 1.1381183 1.2000000 1.2400000
##  [8] 1.2699991 1.2900000 1.3200000 1.3400000 1.3592817
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could compare in the same chart curves of different dates&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;irbrl_20130613 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; get_curve&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2013-06-13&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PRE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
irbrl_20130611 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; get_curve&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2013-06-11&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PRE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kp"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;252&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; terms
irbrl_20130611&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; d11
irbrl_20130613&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; d13
terms &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; terms &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kp"&gt;Sys.Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
plot&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="p"&gt;,&lt;/span&gt; d11&lt;span class="p"&gt;,&lt;/span&gt; type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; xlab&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Dates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ylab&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Rates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; xaxt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
axis&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; terms&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%b %y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
points&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="p"&gt;,&lt;/span&gt; d11&lt;span class="p"&gt;,&lt;/span&gt; pch&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;steelblue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
points&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="p"&gt;,&lt;/span&gt; d13&lt;span class="p"&gt;,&lt;/span&gt; pch&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;darkred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
lines&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="p"&gt;,&lt;/span&gt; d11&lt;span class="p"&gt;,&lt;/span&gt; lwd&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;steelblue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
lines&lt;span class="p"&gt;(&lt;/span&gt;terms&lt;span class="p"&gt;,&lt;/span&gt; d13&lt;span class="p"&gt;,&lt;/span&gt; lwd&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;darkred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
legend&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bottomright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; legend&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2013-06-11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2013-06-13&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;steelblue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;darkred&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; pch&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;lwd&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
grid&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Brazilian Term Structure" src="http://wilsonfreitas.github.io/figure/irbrl-term-structure-plot-1.png"&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;str_supplant&lt;/code&gt; was explained in another &lt;a href="http://wilsonfreitas.github.io/posts/string-interpolation-in-r.html"&gt;post&lt;/a&gt;.
I mostly use the tickers &lt;code&gt;PRE&lt;/code&gt; for deposits in Brazilian Real and &lt;code&gt;DOL&lt;/code&gt; for deposits in US Dollar.
That code works pretty well for &lt;code&gt;EUR&lt;/code&gt; (Euro deposits) interest rates, but it has to be adjusted to handle &lt;code&gt;DIC&lt;/code&gt; and &lt;code&gt;DIM&lt;/code&gt; tickers (IPCA and IGP-M inflation rates).&lt;/p&gt;
&lt;p&gt;As I told before that is a quick and dirt implementation but it is also quite useful.
With far none effort you have at hand an interpolator for interest rate term structures that can easily be ported to any other curve feeder.&lt;/p&gt;
&lt;p&gt;Other point I'd like to mention is the huge effort, in my opinion, to build a attractive chart using the plot function, bellow I present an example using the &lt;a href="http://ggplot2.org"&gt;ggplot2&lt;/a&gt; package for the same data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;ggplot2&lt;span class="p"&gt;)&lt;/span&gt;
ir_df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; stack&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`2014-06-11`&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d11&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`2014-06-13`&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d13&lt;span class="p"&gt;))&lt;/span&gt;
ir_df&lt;span class="o"&gt;$&lt;/span&gt;date &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; terms
ggplot&lt;span class="p"&gt;(&lt;/span&gt;data&lt;span class="o"&gt;=&lt;/span&gt;ir_df&lt;span class="p"&gt;,&lt;/span&gt; aes&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; y&lt;span class="o"&gt;=&lt;/span&gt;values&lt;span class="p"&gt;,&lt;/span&gt; colour&lt;span class="o"&gt;=&lt;/span&gt;ind&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; geom_point&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; geom_line&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; xlab&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Dates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; ylab&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Rates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; theme&lt;span class="p"&gt;(&lt;/span&gt;legend.title&lt;span class="o"&gt;=&lt;/span&gt;element_blank&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Brazilian Term Structure with ggplot2" src="http://wilsonfreitas.github.io/figure/irbrl-term-structure-ggplot-1.png"&gt;&lt;/p&gt;</content><category term="R"></category><category term="bizdays"></category><category term="term structure"></category><category term="interpolation"></category><category term="quick tips"></category></entry><entry><title>String interpolation in R</title><link href="http://wilsonfreitas.github.io/posts/string-interpolation-in-r.html" rel="alternate"></link><published>2014-04-09T00:00:00-03:00</published><updated>2014-04-09T00:00:00-03:00</updated><author><name>Wilson Freitas</name></author><id>tag:wilsonfreitas.github.io,2014-04-09:/posts/string-interpolation-in-r.html</id><summary type="html">&lt;!-- param = {domain: 'valvion.com', media: 'http://media.valvion.com/'};
url = "{media}logo.gif".supplant(param); --&gt;

&lt;p&gt;String handling in R is hard, there are a few packages that help making that task not so hard, but it is still hard.
In my opinion string handling in R will never be as good as languages like Python or Perl, it looks like the language hasn't been designed â€¦&lt;/p&gt;</summary><content type="html">&lt;!-- param = {domain: 'valvion.com', media: 'http://media.valvion.com/'};
url = "{media}logo.gif".supplant(param); --&gt;

&lt;p&gt;String handling in R is hard, there are a few packages that help making that task not so hard, but it is still hard.
In my opinion string handling in R will never be as good as languages like Python or Perl, it looks like the language hasn't been designed to face that problem.
But sincerely speaking, I don't think R realy need that, I can pass without it, I can go fairly well with the packages available, and the most popular is &lt;a href="http://cran.r-project.org/web/packages/stringr/index.html" title="Hadley Wickham's stringr"&gt;&lt;code&gt;stringr&lt;/code&gt;&lt;/a&gt; developed by Hadley Wickham.
It has several good functions for string handling, but it lacks string interpolation like we do in Python.
That's the reason why I developed &lt;code&gt;str_supplant&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;str_supplant &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;string&lt;span class="p"&gt;,&lt;/span&gt; repl&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    result &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; str_match_all&lt;span class="p"&gt;(&lt;/span&gt;string&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\{([^{}]*)\\}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;result&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;string&lt;span class="p"&gt;)&lt;/span&gt;
    result &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; result&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="kp"&gt;seq_len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;result&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; result&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;,]&lt;/span&gt;
        pattern &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        key &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kp"&gt;is.null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;repl&lt;span class="p"&gt;[[&lt;/span&gt;key&lt;span class="p"&gt;]]))&lt;/span&gt;
            string &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;pattern&lt;span class="p"&gt;,&lt;/span&gt; repl&lt;span class="p"&gt;[[&lt;/span&gt;key&lt;span class="p"&gt;]],&lt;/span&gt; string&lt;span class="p"&gt;,&lt;/span&gt; perl&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    string
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here it follows an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parms &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;media&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://aboutwilson.net&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; face&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wilson&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
str_supplant&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{media}/logo.gif, {media}/img/ {face}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; parms&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## [1] &amp;quot;http://aboutwilson.net/logo.gif, http://aboutwilson.net/img/ wilson&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first argument is the string to be interpolated and the second a &lt;code&gt;list&lt;/code&gt; with the keys to be used.
If a key doesn't match it isn't interpolated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parms &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
str_supplant&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is {name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; parms&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## [1] &amp;quot;My name is {name}&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That implementation was deeply inspired by &lt;a href="http://javascript.crockford.com/remedial.html" title="Douglas Crockford"&gt;Douglas Crockford&lt;/a&gt;'s &lt;code&gt;supplant&lt;/code&gt; implementation.
Unfortunately that implementation hasn't been vectorized yet, but I think it is quite useful anyway.
I hope it help others like it's been helping me.&lt;/p&gt;</content><category term="R"></category><category term="string handling"></category></entry><entry><title>Computing EWMA 2</title><link href="http://wilsonfreitas.github.io/posts/computing-ewma-2.html" rel="alternate"></link><published>2014-04-04T00:00:00-03:00</published><updated>2014-04-04T00:00:00-03:00</updated><author><name>Wilson Freitas</name></author><id>tag:wilsonfreitas.github.io,2014-04-04:/posts/computing-ewma-2.html</id><summary type="html">&lt;p&gt;Months ago I released a post entitled &lt;a href="http://wilsonfreitas.github.io/posts/computing-ewma.html" title="Computing EWMA"&gt;Computing EWMA&lt;/a&gt; exploring the functional approach to implement EWMA calculations in R and also compared that with what I called &lt;em&gt;loop-oriented&lt;/em&gt; implementation.
That was quite ammazing to see that the functional approach was almost 2 times faster.&lt;/p&gt;
&lt;p&gt;After a while I found the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Months ago I released a post entitled &lt;a href="http://wilsonfreitas.github.io/posts/computing-ewma.html" title="Computing EWMA"&gt;Computing EWMA&lt;/a&gt; exploring the functional approach to implement EWMA calculations in R and also compared that with what I called &lt;em&gt;loop-oriented&lt;/em&gt; implementation.
That was quite ammazing to see that the functional approach was almost 2 times faster.&lt;/p&gt;
&lt;p&gt;After a while I found the function &lt;code&gt;filter&lt;/code&gt; of the package &lt;code&gt;stats&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## function (x, filter, method = c(&amp;quot;convolution&amp;quot;, &amp;quot;recursive&amp;quot;), 
##     sides = 2L, circular = FALSE, init = NULL) 
## NULL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function applies linear filtering to univariate or multivariate time series.
You can get a moving average by setting &lt;code&gt;method="convolution"&lt;/code&gt; or an autoregression for &lt;code&gt;method="recursive"&lt;/code&gt;.
Since EWMA is an autoregressive model, the &lt;code&gt;"recursive"&lt;/code&gt; method is appropriate.
The argument &lt;code&gt;x&lt;/code&gt; receives the time series and &lt;code&gt;filter&lt;/code&gt; a vector of coefficients.
The &lt;code&gt;"recursive"&lt;/code&gt; method uses the &lt;code&gt;init&lt;/code&gt; argument to specify the initial values of the time series.
Providing a series &lt;code&gt;x&lt;/code&gt; and a filter $\phi$ the response &lt;code&gt;y&lt;/code&gt; is much like the sequence below:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
y_1 &amp;amp; = 0 \hspace{0.5cm} \\
y_2 &amp;amp; = \phi y_1 + x_1 \hspace{0.5cm} \\
y_2 &amp;amp; = \phi y_2 + x_2 \hspace{0.5cm} \\
\vdots &amp;amp; \hspace{0.5cm} \\
y_{n+1} &amp;amp; = \phi y_n + x_n
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Taking a look at EWMA's dynamics&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\hat\sigma^2_0 &amp;amp; = 0  \hspace{0.5cm} \\
\hat\sigma^2_1 &amp;amp; = \lambda\hat\sigma^2_0 + (1 - \lambda)r^2_0  \hspace{0.5cm} \\
\hat\sigma^2_2 &amp;amp; = \lambda\hat\sigma^2_1 + (1 - \lambda)r^2_1  \hspace{0.5cm} \\
\vdots &amp;amp; \hspace{0.5cm} \\
\hat\sigma^2_{t+1} &amp;amp; = \lambda\hat\sigma^2_t + (1 - \lambda)r^2_t
\end{align}
$$&lt;/p&gt;
&lt;p&gt;we observe that the input $x_i = (1 - \lambda)r^2_i$, the filter $\phi = \lambda$ and $y_i = \sigma^2_i$ is the response.
The initial value can be set to $0$.
The code implementation follows below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ewma.filter &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    r2 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; lambda&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; rets&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;filter&lt;span class="p"&gt;(&lt;/span&gt;r2&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;recursive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; init &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See that this implementation is even simpler than the others, although it is not so easy to comprehend.
Running the same test done before we see that this is not only simpler but also faster.
It runs almost 2 times faster than the functional approach.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;system.time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;replicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ewma.loop&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##    user  system elapsed 
##   4.101   0.026   4.127
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;system.time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;replicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ewma.func&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##    user  system elapsed 
##   2.293   0.009   2.302
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;system.time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;replicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ewma.filter&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##    user  system elapsed 
##   1.062   0.009   1.072
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here it has the &lt;a href="https://gist.github.com/wilsonfreitas/9972408"&gt;full code&lt;/a&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/wilsonfreitas/9972408.js"&gt;&lt;/script&gt;</content><category term="risk management"></category><category term="volatility"></category><category term="R"></category></entry><entry><title>Pricing Brazilian Government Bonds: LFT</title><link href="http://wilsonfreitas.github.io/posts/pricing-brazilian-government-bonds-lft.html" rel="alternate"></link><published>2014-04-03T00:00:00-03:00</published><updated>2014-04-03T00:00:00-03:00</updated><author><name>Wilson Freitas</name></author><id>tag:wilsonfreitas.github.io,2014-04-03:/posts/pricing-brazilian-government-bonds-lft.html</id><summary type="html">&lt;p&gt;For many years I've been working for and with software vendors in the brazilian financial industry.
The great majority of pricing and risk management aplications running on here were not developed here in Brazil.
I think that is the main reason I saw many projects struggling to deliver a glimpse â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;For many years I've been working for and with software vendors in the brazilian financial industry.
The great majority of pricing and risk management aplications running on here were not developed here in Brazil.
I think that is the main reason I saw many projects struggling to deliver a glimpse of what had been promissed during the software selection meetings.
One thing that is usually said is that brazilian market has its &lt;a href="http://en.wikipedia.org/wiki/Jabuticaba"&gt;jabuticabas&lt;/a&gt;, yeah jabuticaba.
It is a sweet fruit which grows in Brazil, vastly.
And like the fruit jabuticaba, the brazilian financial market has a bunch of financial instruments with annoying characteristics such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;business days rules&lt;/li&gt;
&lt;li&gt;truncation rules, mainly for interest rates&lt;/li&gt;
&lt;li&gt;stupid inflation rules&lt;/li&gt;
&lt;li&gt;the PTAX currency which yields the dirty coupon for the foreign interest rate&lt;/li&gt;
&lt;li&gt;and many others&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post I want to start a series where will show the steps to validate the pricing rules for a few brazilian financial instruments.
I am going to start with the brazilian government floating rate bond called LFT or Letras Financeiras do Tesouro (Treasury Financial Letters).
Despite being a Floating Rate Bond, LFT is traded above its face value and a spread, usually quite small and negative, is used to discount it.
These calculations seem to be pretty simple but it hides some pitfalls and because of that we are going to go on step by step, paying attention to details.&lt;/p&gt;
&lt;h2&gt;The instrument&lt;/h2&gt;
&lt;p&gt;As mentioned before, LFT is a Floating Rate Bond so it accumulates daily interest rate from its issue date up to maturity.
The LFT's issue value is R$ 1000,00 then the fair value of a LFT is&lt;/p&gt;
&lt;p&gt;$$
LFT_t = 1000 \prod_{n=t_i}^{t-1}(1 + r_{n})^\frac{1}{252}
$$&lt;/p&gt;
&lt;p&gt;where $t$ refers to the mark-to-market date, $t_i$ the issue date and $t-1$ the business day before mark-to-market date.
However, it is usually traded in values higher than the fair value as if a negative spread was applied discounting the fair value, leading to:&lt;/p&gt;
&lt;p&gt;$$
LFT_t = \frac{1000 \prod_{n=t_i}^{t-1}(1 + r_{n})^\frac{1}{252}}{(1 + s_t)^{D_T/252}}
$$&lt;/p&gt;
&lt;p&gt;where $s_t$ is the spread and $D_T$ the number of business days up to maturity.&lt;/p&gt;
&lt;h2&gt;Notional Value â€” VNA&lt;/h2&gt;
&lt;p&gt;The rule to compute the notional value (VNAâ€”Valor Nominal Acumulado) is fairly simple, accumulate the daily interest rate from LFT's issue date up to reference date (mark-to-market date).&lt;/p&gt;
&lt;p&gt;What do we need?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;issue date&lt;/li&gt;
&lt;li&gt;reference date&lt;/li&gt;
&lt;li&gt;daily brazilian government interest rate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The LFT's issue date is 2000-07-01 and our reference date is 2014-03-21.
Let's start setting the reference date:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ref_date &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2014-03-21&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The historical interest rates are downloaded from &lt;a href="http://www.quandl.com" title="Quandl"&gt;Quandl&lt;/a&gt; and data in properly transformed to suitable formats:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;Quandl&lt;span class="p"&gt;)&lt;/span&gt;
selic &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; Quandl&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;BCB/1178&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; start_date&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2000-07-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; end_date&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2014-03-21&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; order&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;asc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
selic &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;selic&lt;span class="p"&gt;,&lt;/span&gt; Date&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;Date&lt;span class="p"&gt;))&lt;/span&gt;
str&lt;span class="p"&gt;(&lt;/span&gt;selic&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## &amp;#39;data.frame&amp;#39;:    3448 obs. of  2 variables:
##  $ Date : Date, format: &amp;quot;2000-07-03&amp;quot; &amp;quot;2000-07-04&amp;quot; ...
##  $ Value: num  17.3 17.2 17.2 17.3 17.3 ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Computing VNA&lt;/h3&gt;
&lt;p&gt;The formula to compute VNA is&lt;/p&gt;
&lt;p&gt;$$
VNA = 1000\prod_{n=1}^{T}(1 + r_{n-i})^\frac{1}{252}
$$&lt;/p&gt;
&lt;p&gt;where &lt;code&gt;T&lt;/code&gt; refers to issue date.
As I said before, the formula is pretty simple but hides inconvenient secrets.
This formula is computed in 3 steps, enumerated below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compute the interest rate factor $(1 + r_i)^\frac{1}{252}$ and round it in 8 digits&lt;/li&gt;
&lt;li&gt;Compute the accumulated factor, using &lt;code&gt;cumprod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Compute the VNA multiplying the accumulated factor by 1000 and truncate it in 6 digits&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The final value is shifted one day because the accumulated amount refers to the day after the interest rate is released.
The function &lt;code&gt;compute_vna&lt;/code&gt; below execute these steps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compute_vna &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;ds&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    ds &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;ds&lt;span class="p"&gt;,&lt;/span&gt; Factor&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; Value&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;252&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    ds &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;ds&lt;span class="p"&gt;,&lt;/span&gt; CumFactor&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;cumprod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;Factor&lt;span class="p"&gt;))&lt;/span&gt;
    ds &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;ds&lt;span class="p"&gt;,&lt;/span&gt; VNA&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;truncate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;CumFactor&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    ds&lt;span class="o"&gt;$&lt;/span&gt;VNA &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;ds&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; VNA&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;VNA&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;
    ds
&lt;span class="p"&gt;}&lt;/span&gt;

selic &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; compute_vna&lt;span class="p"&gt;(&lt;/span&gt;selic&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kp"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;selic&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##         Date Value     Factor   CumFactor         VNA
## 1 2000-07-03 17.26 1.00063204 1.000632040          NA
## 2 2000-07-04 17.22 1.00063068 1.001263119 1000.632040
## 3 2000-07-05 17.23 1.00063102 1.001894936 1001.263118
## 4 2000-07-06 17.28 1.00063272 1.002528855 1001.894935
## 5 2000-07-07 17.28 1.00063272 1.003163175 1002.528854
## 6 2000-07-10 17.01 1.00062356 1.003788707 1003.163174
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;selic&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##            Date Value     Factor   CumFactor         VNA
## 3443 2014-03-14 10.65 1.00040168 6.013481466 6011.066940
## 3444 2014-03-17 10.65 1.00040168 6.015896961 6013.481465
## 3445 2014-03-18 10.65 1.00040168 6.018313427 6015.896961
## 3446 2014-03-19 10.65 1.00040168 6.020730863 6018.313426
## 3447 2014-03-20 10.65 1.00040168 6.023149270 6020.730862
## 3448 2014-03-21 10.65 1.00040168 6.025568648 6023.149269
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Observe the VNA for the reference date, we will use this value to compute the theoretical value.&lt;/p&gt;
&lt;h2&gt;Computing the theoretical value&lt;/h2&gt;
&lt;p&gt;To compute the LFT's theoretical value we need the terms and conditions of the contracts.
That information can be obtained at &lt;a href="http://www.anbima.com.br/merc_sec/merc-sec.asp" title="Government Bonds Quotations"&gt;ANBIMA's web site&lt;/a&gt;, there is a link to a text file which contains relevant information to price all brazilian government bonds.
Unfortunately, only the last 5 business days are kept available to download.
The file used to validate the prices can be found &lt;a href="/datasets/ms140321.txt"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code below loads and prepares data for pricing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tit_pub &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.table&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ms140321.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; skip&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; header&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
lft_quot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;tit_pub&lt;span class="p"&gt;,&lt;/span&gt; Titulo &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;LFT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
lft_quot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; lft_quot&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Data.Referencia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Data.Vencimento&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Tx..Indicativas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PU&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lft_quot&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;RefDate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Maturity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Spread&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SpotPrice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

lft_quot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lft_quot&lt;span class="p"&gt;,&lt;/span&gt;
    Spread&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; Spread&lt;span class="p"&gt;)),&lt;/span&gt;
    SpotPrice&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; SpotPrice&lt;span class="p"&gt;)),&lt;/span&gt;
    RefDate&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;RefDate&lt;span class="p"&gt;),&lt;/span&gt; format&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%Y%m%d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    Maturity&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;Maturity&lt;span class="p"&gt;),&lt;/span&gt; format&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%Y%m%d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

lft_quot
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##       RefDate   Maturity  Spread   SpotPrice
## 16 2014-03-21 2014-09-07 -0.0146 6023.552820
## 17 2014-03-21 2015-03-07 -0.0157 6024.058764
## 18 2014-03-21 2015-09-07 -0.0169 6024.636986
## 19 2014-03-21 2016-03-01 -0.0179 6025.233278
## 20 2014-03-21 2016-09-07 -0.0183 6025.865709
## 21 2014-03-21 2017-03-07 -0.0196 6026.630649
## 22 2014-03-21 2017-09-07 -0.0205 6027.419681
## 23 2014-03-21 2018-03-01 -0.0209 6028.088251
## 24 2014-03-21 2018-09-01 -0.0209 6028.732728
## 25 2014-03-21 2019-03-01 -0.0217 6029.588015
## 26 2014-03-21 2020-03-01 -0.0228 6031.280520
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We observe 11 instruments and we have selected all necessary fields to price them properly, now we have a few adjustments.
Firstly, we have to move the maturity to the next business day if it is not a business day and after that we have to find out the number of business days between the reference and maturity dates.
These tasks can be easily done with the &lt;a href="https://github.com/wilsonfreitas/R-bizdays" title="bizdays package"&gt;bizdays&lt;/a&gt; package, developed by me.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wilsonfreitas/R-bizdays" title="bizdays package"&gt;bizdays&lt;/a&gt; works with calendars as a list of dates representing non-working days.
Different from other packages which work with algorithmic calendar implementations, &lt;strong&gt;bizdays&lt;/strong&gt; can have any calendar set simply using a list of dates.
It relies on your needs.
I've used the dataset &lt;code&gt;holidaysANBIMA&lt;/code&gt; which is part of &lt;strong&gt;bizdays&lt;/strong&gt;.
This calendar has all financial holidays practiced in Brazil.
The function &lt;code&gt;adjust.next&lt;/code&gt; move the given date to the following if it is not a business day and 
the function &lt;code&gt;bizdays&lt;/code&gt; returns the amount of business days between 2 dates.
Look that both functions work vectorized.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;bizdays&lt;span class="p"&gt;)&lt;/span&gt;
cal &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; Calendar&lt;span class="p"&gt;(&lt;/span&gt;holidays&lt;span class="o"&gt;=&lt;/span&gt;holidaysANBIMA&lt;span class="p"&gt;,&lt;/span&gt; name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ANBIMA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; weekdays&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;saturday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sunday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## Warning in Calendar(holidays = holidaysANBIMA, name = &amp;quot;ANBIMA&amp;quot;, weekdays
## = c(&amp;quot;saturday&amp;quot;, : This function will be deprecated, use create.calendar
## instead.
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lft_quot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lft_quot&lt;span class="p"&gt;,&lt;/span&gt; MaturityAdj&lt;span class="o"&gt;=&lt;/span&gt;adjust.next&lt;span class="p"&gt;(&lt;/span&gt;Maturity&lt;span class="p"&gt;,&lt;/span&gt; cal&lt;span class="p"&gt;))&lt;/span&gt;
lft_quot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lft_quot&lt;span class="p"&gt;,&lt;/span&gt; BusinessDays&lt;span class="o"&gt;=&lt;/span&gt;bizdays&lt;span class="p"&gt;(&lt;/span&gt;ref_date&lt;span class="p"&gt;,&lt;/span&gt; MaturityAdj&lt;span class="p"&gt;,&lt;/span&gt; cal&lt;span class="p"&gt;))&lt;/span&gt;

lft_quot
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##       RefDate   Maturity  Spread   SpotPrice MaturityAdj BusinessDays
## 16 2014-03-21 2014-09-07 -0.0146 6023.552820  2014-09-08          117
## 17 2014-03-21 2015-03-07 -0.0157 6024.058764  2015-03-09          243
## 18 2014-03-21 2015-09-07 -0.0169 6024.636986  2015-09-08          369
## 19 2014-03-21 2016-03-01 -0.0179 6025.233278  2016-03-01          488
## 20 2014-03-21 2016-09-07 -0.0183 6025.865709  2016-09-08          621
## 21 2014-03-21 2017-03-07 -0.0196 6026.630649  2017-03-07          744
## 22 2014-03-21 2017-09-07 -0.0205 6027.419681  2017-09-08          872
## 23 2014-03-21 2018-03-01 -0.0209 6028.088251  2018-03-01          989
## 24 2014-03-21 2018-09-01 -0.0209 6028.732728  2018-09-03         1118
## 25 2014-03-21 2019-03-01 -0.0217 6029.588015  2019-03-01         1241
## 26 2014-03-21 2020-03-01 -0.0228 6031.280520  2020-03-02         1492
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We see that several dates have been correctly adjusted to their following dates and using these new dates the number of business days have been computed.&lt;/p&gt;
&lt;p&gt;The code below computes the theoretical price.
Note that the &lt;code&gt;Quotation&lt;/code&gt; is truncated in 4 digits and the theoretical price in 6.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lft_quot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lft_quot&lt;span class="p"&gt;,&lt;/span&gt; Quotation&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;truncate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; Spread&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;BusinessDays&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;252&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
VNA &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;selic&lt;span class="p"&gt;,&lt;/span&gt; VNA&lt;span class="p"&gt;[&lt;/span&gt;Date &lt;span class="o"&gt;==&lt;/span&gt; ref_date&lt;span class="p"&gt;])&lt;/span&gt;
lft_quot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lft_quot&lt;span class="p"&gt;,&lt;/span&gt; TheoPrice&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;truncate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;VNA&lt;span class="o"&gt;*&lt;/span&gt;Quotation&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After all those steps we are able to compare theoretical and spot price.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lft_quot&lt;span class="p"&gt;,&lt;/span&gt; SpotPrice&lt;span class="o"&gt;-&lt;/span&gt;TheoPrice&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##  [1] 0 0 0 0 0 0 0 0 0 0 0
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lft_quot&lt;span class="p"&gt;,&lt;/span&gt; SpotPrice&lt;span class="o"&gt;-&lt;/span&gt;TheoPrice&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## [1] TRUE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the output is &lt;code&gt;TRUE&lt;/code&gt; we all have to agree that these values match.
As I said this is pretty much easy once you know all truncations and roundings that appears along the way.
Another tricky point is that we can't invert that formula analytically, to find out the spread having the spot price of the bond.
Because of the truncations we have to use that algorithm and implement a kind of goal seek mechanism to obtain the spread.&lt;/p&gt;</content><category term="R"></category><category term="brazilian bonds"></category><category term="LFT"></category><category term="bizdays"></category></entry><entry><title>Computing EWMA</title><link href="http://wilsonfreitas.github.io/posts/computing-ewma.html" rel="alternate"></link><published>2013-08-18T00:00:00-03:00</published><updated>2013-08-18T00:00:00-03:00</updated><author><name>Wilson Freitas</name></author><id>tag:wilsonfreitas.github.io,2013-08-18:/posts/computing-ewma.html</id><summary type="html">&lt;p&gt;As a loop oriented developerâ€”and long time user of old static typed languagesâ€”my first attempt to compute EWMA in R was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ewma.loop &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    n &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="m"&gt;+1&lt;/span&gt;
    sig.s &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; n&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;n&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        sig.s&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; sig.s&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;lambda â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;As a loop oriented developerâ€”and long time user of old static typed languagesâ€”my first attempt to compute EWMA in R was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ewma.loop &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    n &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="m"&gt;+1&lt;/span&gt;
    sig.s &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; n&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;n&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        sig.s&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; sig.s&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;lambda &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; lambda&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sig.s&lt;span class="p"&gt;,&lt;/span&gt; n&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At a first sigh this implementation seemed to be good but from the perspective of an R developer it isn't.
Avoiding loops would be a better.
After a little research I found &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ewma.func &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    sig.p &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    sig.s &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;vapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="p"&gt;)&lt;/span&gt; sig.p &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt; sig.p&lt;span class="o"&gt;*&lt;/span&gt;lambda &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; lambda&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sig.s&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This implementation looked clean and sexy to me and it also reveals the power of &lt;code&gt;*apply&lt;/code&gt; functions.
I decided to evaluate the performance of both implementations in order to find out which one is really the best.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lambda &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0.94&lt;/span&gt;
rets &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0.02&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;rnorm&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kp"&gt;system.time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kp"&gt;replicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ewma.loop&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# user  system elapsed &lt;/span&gt;
&lt;span class="c1"&gt;# 4.075   0.018   4.093 &lt;/span&gt;
&lt;span class="kp"&gt;system.time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kp"&gt;replicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ewma.func&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# user  system elapsed &lt;/span&gt;
&lt;span class="c1"&gt;# 2.271   0.001   2.272&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The results are amazing.
Using functional approach is, without doubt, much better.
It is almost 2 times better and this is significant.&lt;/p&gt;
&lt;script src="https://gist.github.com/wilsonfreitas/6279978.js"&gt;&lt;/script&gt;</content><category term="risk management"></category><category term="volatility"></category><category term="R"></category></entry><entry><title>EWMA convergence and divergence</title><link href="http://wilsonfreitas.github.io/posts/ewma-convergence-and-divergence.html" rel="alternate"></link><published>2013-08-16T00:00:00-03:00</published><updated>2013-08-16T00:00:00-03:00</updated><author><name>Wilson Freitas</name></author><id>tag:wilsonfreitas.github.io,2013-08-16:/posts/ewma-convergence-and-divergence.html</id><summary type="html">&lt;p&gt;The so famous EWMA (Exponentially Weighted Moving Average) model&lt;/p&gt;
&lt;p&gt;$$
\hat\sigma^2_t = \lambda\hat\sigma^2_{t-1} + (1 - \lambda)r^2_t
$$&lt;/p&gt;
&lt;p&gt;used to estimate the volatility of asset returns.
It is extensively used in Risk Management and is in the core of RiskMetrics.
EWMA has a magic parameter $\lambda$ that â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The so famous EWMA (Exponentially Weighted Moving Average) model&lt;/p&gt;
&lt;p&gt;$$
\hat\sigma^2_t = \lambda\hat\sigma^2_{t-1} + (1 - \lambda)r^2_t
$$&lt;/p&gt;
&lt;p&gt;used to estimate the volatility of asset returns.
It is extensively used in Risk Management and is in the core of RiskMetrics.
EWMA has a magic parameter $\lambda$ that is $0.94$ in the absolutely great amount of Risk Management Systems running World Wide.
I can't tell if it is JPMorgan's fault or it's one more of those situations where the idiots are taking over, but why $0.94$, why people seem to accept it without have any idea where it came from. (Why so serious.)
But ok, JPM said that and JPM is great, so I see no reason to question that.
However, there is another point which disturbs me more, the well accepted EWMA's &lt;em&gt;period of convergence&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It is well known, among risk management practioneers, that EWMA with $\lambda=0.94$ has a &lt;em&gt;period of convergence&lt;/em&gt; that is about 60 time steps.
Unfortunately, for some series, you don't have 60 points of historical data and EWMA can't reach its convergence.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh! It looks a bad thing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some practioneers usually use a &lt;em&gt;proxy&lt;/em&gt; to fulfill that pre-requisite and that proxy can be any related asset (yeah! a bit heuristic).
Of course I have one question: does it really matters?.
I mean, is it really necessary to use a proxy to have a good estimative of the volatility?
Use no proxy isn't an option?
Or it is operational pre-requisite, the risk management system can't compute the volatility of a time series that doesn't enough historical data to guarantee the convergence its convergence.&lt;/p&gt;
&lt;p&gt;I am going too far and I am afraid my anger on that subject attracts more attention than what really matters: &lt;strong&gt;how many returns are necessary to estimate $\hat\sigma^2_t$?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don't know the answer and I do think it has no right answer.
I did an experiment in order to try to observe the EWMA's convergence and the results gave me a little hope.&lt;/p&gt;
&lt;h2&gt;Bootstraping time series&lt;/h2&gt;
&lt;p&gt;I picked up PETR4 time series and computed the returns for the year of 2009.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;xts&lt;span class="p"&gt;)&lt;/span&gt;
table.df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PETR4.daily.raw.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; header&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; stringsAsFactors&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kp"&gt;rownames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;table.df&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;table.df&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
prices.df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; table.df&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Adj.Close&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; drop&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
prices.x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; as.xts&lt;span class="p"&gt;(&lt;/span&gt;prices.df&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; order.by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;rownames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;prices.df&lt;span class="p"&gt;)))&lt;/span&gt;
ret.x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;prices.x&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2009&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
plot&lt;span class="p"&gt;(&lt;/span&gt;prices.x&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2009&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
boxplot&lt;span class="p"&gt;(&lt;/span&gt;coredata&lt;span class="p"&gt;(&lt;/span&gt;ret.x&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The graph below shows time series of prices of PETR4 for the year of 2009â€”that seemed to be a good year for PETR4.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PETR4 prices" src="http://wilsonfreitas.github.io/figure/prices.png"&gt;&lt;/p&gt;
&lt;p&gt;To have an idea of how volatile its was in that year I looked at the box plot of returns.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PETR4 returns boxplot" src="http://wilsonfreitas.github.io/figure/boxplot.png"&gt;&lt;/p&gt;
&lt;p&gt;I put the returns into a matrix because it is easier to work with this structure instead of working with a time series.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rets &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; coredata&lt;span class="p"&gt;(&lt;/span&gt;first&lt;span class="p"&gt;(&lt;/span&gt;ret.x&lt;span class="p"&gt;,&lt;/span&gt; n&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, assuming that the returns are IID I ran a bootstrap computating EWMA for each sample of the time series generated by &lt;code&gt;boot&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;boot&lt;span class="p"&gt;)&lt;/span&gt;
ewma.boot &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="p"&gt;,&lt;/span&gt; idx&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    sig.p &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    sig.s &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;vapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;idx&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;i&lt;span class="p"&gt;)&lt;/span&gt; sig.p &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt; sig.p&lt;span class="o"&gt;*&lt;/span&gt;lambda &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; lambda&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sig.s&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
lambda &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0.94&lt;/span&gt;
r.ewma.boot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; boot&lt;span class="p"&gt;(&lt;/span&gt;rets&lt;span class="p"&gt;,&lt;/span&gt; statistic&lt;span class="o"&gt;=&lt;/span&gt;ewma.boot&lt;span class="p"&gt;,&lt;/span&gt; R&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the end of the bootstrap process I got a sample of EWMA time series in the variable &lt;code&gt;r.ewma.boot&lt;/code&gt;.
&lt;code&gt;r.ewma.boot&lt;/code&gt; is an instance of the &lt;em&gt;class&lt;/em&gt; &lt;code&gt;boot&lt;/code&gt;, which is returned by the function with the same name.
It has an attribute &lt;code&gt;t&lt;/code&gt; which stores all samples generated by the execution of &lt;code&gt;boot&lt;/code&gt; and other attribute &lt;code&gt;t0&lt;/code&gt; which stores the result for the original time series.
I ran that experiment with $\lambda=0.94$, but it can be run with any other value.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bootstraping EWMA calculations with lambda=0.94" src="http://wilsonfreitas.github.io/figure/bootstrap-lambda94.png"&gt;&lt;/p&gt;
&lt;p&gt;The red line is the mean volatility and as we can observe, it converges to the long run standard deviationâ€”shown by the black horizontal line.
And, as some practioneers usually say, 60 time steps isn't a bad choice for EWMA's convergence, when $\lambda=0.94$.
For $\lambda=0.98$ we need more time steps to reach the convergenceâ€”as can be seen in the image below the time series used has 200 time steps instead of 100.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bootstraping EWMA calculations with lambda=0.98" src="http://wilsonfreitas.github.io/figure/bootstrap-lambda98.png"&gt;&lt;/p&gt;
&lt;p&gt;We clearly observe the convergence, I tend to believe it is in distribution.
Assintoticaly the mean value of EWMA estimator converges to the sample &lt;code&gt;sd&lt;/code&gt;, but EWMA gives a local estimative of volatility as we observe in the blue line.&lt;/p&gt;
&lt;h2&gt;Simulated time series&lt;/h2&gt;
&lt;p&gt;I extended that experiment for an environment where I could control all variables.
So, following the assumption of IID returns I created one sample of returns and bootstraped it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bootstraping simulated time series with lambda=0.94" src="http://wilsonfreitas.github.io/figure/bootstrap-lambda94-sim.png"&gt;&lt;/p&gt;
&lt;p&gt;We observe the convergence to the sample &lt;code&gt;sd&lt;/code&gt; which differs a little from the theoretical standard deviation (0.02).
As expected the convergence with $\lambda=0.94$ occurs within the same numbers of time steps we've observed in the real time series.
This result might help confirming the assumption that assets' returns are IID.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lambda &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0.94&lt;/span&gt;
sig.m &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; nrow&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ncol&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
r &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0.02&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;rnorm&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sig.m&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
plot&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; xlab&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ylab&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sigma&lt;span class="p"&gt;),&lt;/span&gt; 
    xlim&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kp"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sig.m&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; ylim&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.03&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;k &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sig.m&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    sig.p &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    sig.s &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;vapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sig.m&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;i&lt;span class="p"&gt;)&lt;/span&gt; sig.p &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt; sig.p&lt;span class="o"&gt;*&lt;/span&gt;lambda &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; lambda&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    lines&lt;span class="p"&gt;(&lt;/span&gt;sig.m&lt;span class="p"&gt;[&lt;/span&gt;k&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sig.s&lt;span class="p"&gt;),&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;grey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
abline&lt;span class="p"&gt;(&lt;/span&gt;h&lt;span class="o"&gt;=&lt;/span&gt;sd&lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="p"&gt;),&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
abline&lt;span class="p"&gt;(&lt;/span&gt;v&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
lines&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sig.m&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I am obliged to agree that the &lt;em&gt;market convention&lt;/em&gt; isn't silly.
Indeed, 60 times steps are reasonable for $\lambda=0.94$ as more time steps are made necessary for greater values of $\lambda$.
Though I couldn't validate the use of a proxy for series that don't have this minimal number of points I see that I can't use EWMA without it.&lt;/p&gt;</content><category term="risk management"></category><category term="volatility"></category><category term="R"></category></entry></feed>